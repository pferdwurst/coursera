
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 20 23:36:07 PDT 2014
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue May 20 23:36:07 PDT 2014
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\010\000\002\005\012" +
    "\000\002\006\002\000\002\006\003\000\002\006\004\000" +
    "\002\007\003\000\002\007\003\000\002\010\006\000\002" +
    "\011\014\000\002\012\002\000\002\012\003\000\002\012" +
    "\004\000\002\013\005\000\002\014\003\000\002\014\004" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\020\006\000\002" +
    "\020\010\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\075\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\004\055\010\001\002\000\006\011" +
    "\012\050\011\001\002\000\006\051\ufffb\056\017\001\002" +
    "\000\004\055\013\001\002\000\004\050\014\001\002\000" +
    "\006\051\ufffb\056\017\001\002\000\006\051\ufff8\056\ufff8" +
    "\001\002\000\006\051\ufffa\056\ufffa\001\002\000\006\044" +
    "\025\045\026\001\002\000\006\051\023\056\017\001\002" +
    "\000\006\051\ufff7\056\ufff7\001\002\000\006\051\ufff9\056" +
    "\ufff9\001\002\000\004\043\024\001\002\000\006\002\ufffc" +
    "\004\ufffc\001\002\000\004\055\070\001\002\000\006\046" +
    "\ufff4\056\031\001\002\000\006\046\034\056\031\001\002" +
    "\000\006\046\ufff3\056\ufff3\001\002\000\004\044\032\001" +
    "\002\000\004\055\033\001\002\000\006\046\ufff1\056\ufff1" +
    "\001\002\000\004\044\036\001\002\000\006\046\ufff2\056" +
    "\ufff2\001\002\000\004\055\037\001\002\000\004\050\040" +
    "\001\002\000\010\050\041\052\045\056\044\001\002\000" +
    "\010\050\041\052\045\056\044\001\002\000\016\040\uffeb" +
    "\046\uffeb\050\uffeb\051\uffeb\052\uffeb\056\uffeb\001\002\000" +
    "\016\040\uffed\046\uffed\050\uffed\051\uffed\052\uffed\056\uffed" +
    "\001\002\000\006\026\062\045\061\001\002\000\016\040" +
    "\uffea\046\uffea\050\uffea\051\uffea\052\uffea\056\uffea\001\002" +
    "\000\006\040\051\051\050\001\002\000\016\040\uffec\046" +
    "\uffec\050\uffec\051\uffec\052\uffec\056\uffec\001\002\000\004" +
    "\043\060\001\002\000\004\056\052\001\002\000\004\045" +
    "\053\001\002\000\010\050\041\052\045\056\044\001\002" +
    "\000\012\046\056\050\041\052\045\056\044\001\002\000" +
    "\016\040\051\046\ufff0\050\ufff0\051\ufff0\052\ufff0\056\ufff0" +
    "\001\002\000\016\040\uffe8\046\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\056\uffe8\001\002\000\016\040\051\046\uffef\050\uffef" +
    "\051\uffef\052\uffef\056\uffef\001\002\000\006\051\ufff5\056" +
    "\ufff5\001\002\000\010\050\041\052\045\056\044\001\002" +
    "\000\010\050\041\052\045\056\044\001\002\000\016\040" +
    "\051\046\uffee\050\uffee\051\uffee\052\uffee\056\uffee\001\002" +
    "\000\012\046\065\050\041\052\045\056\044\001\002\000" +
    "\016\040\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\056\uffe9" +
    "\001\002\000\012\050\041\051\067\052\045\056\044\001" +
    "\002\000\016\040\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\056\uffe7\001\002\000\004\043\071\001\002\000\006\051" +
    "\ufff6\056\ufff6\001\002\000\006\051\073\056\017\001\002" +
    "\000\004\043\074\001\002\000\006\002\ufffd\004\ufffd\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufffe\004\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\010\003\004\004\003\005\005\001\001\000" +
    "\004\005\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\071\007" +
    "\015\010\020\011\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\017\007\015\010\020\011\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\021\010\020\011\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\026\013\027\001\001\000" +
    "\004\013\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\045\016\041\017\046\020\042\001\001\000\014\014" +
    "\065\015\054\016\041\017\046\020\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\053\015" +
    "\054\016\041\017\046\020\042\001\001\000\012\015\056" +
    "\016\041\017\046\020\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\063\015\054\016\041\017\046\020\042\001\001\000" +
    "\012\015\062\016\041\017\046\020\042\001\001\000\002" +
    "\001\001\000\012\015\056\016\041\017\046\020\042\001" +
    "\001\000\002\001\001\000\012\015\056\016\041\017\046" +
    "\020\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\021\010\020\011\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block ::= LBRACE expr_list RBRACE 
            {
              block RESULT = null;
		Expressions b = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT =  new block(curr_lineno(), b); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*block*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dispatch ::= expr DOT OBJECTID LPAREN expr_list RPAREN 
            {
              dispatch RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions b = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), e, id, b);  
              CUP$CoolParser$result = new java_cup.runtime.Symbol(14/*dispatch*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dispatch ::= OBJECTID LPAREN expr_list RPAREN 
            {
              dispatch RESULT = null;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions b = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), id, b);  
              CUP$CoolParser$result = new java_cup.runtime.Symbol(14/*dispatch*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // string ::= STR_CONST 
            {
              string_const RESULT = null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*string*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= string 
            {
              Expression RESULT = null;
		string_const s = (string_const)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = s; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= block 
            {
              Expression RESULT = null;
		block b = (block)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = b; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= dispatch 
            {
              Expression RESULT = null;
		dispatch d = (dispatch)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = d; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new assign(curr_lineno(), o, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr_list ::= expr_list expr 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr_list ::= expr 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= OBJECTID COLON TYPEID 
            {
              formalc RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new formalc(curr_lineno(), o, t); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*formal*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_list ::= formal_list formal 
            {
              Formals RESULT = null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_list ::= formal 
            {
              Formals RESULT = null;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list ::= 
            {
              Formals RESULT = null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // meth ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              method RESULT = null;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), name, fl, t, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*meth*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // attribute ::= OBJECTID COLON TYPEID SEMI 
            {
              attr RESULT = null;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), id, t, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*attribute*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= attribute 
            {
              Feature RESULT = null;
		attr a = (attr)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = a; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= meth 
            {
              Feature RESULT = null;
		method m = (method)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = m; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature_list ::= feature_list feature 
            {
              Features RESULT = null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // feature_list ::= feature 
            {
              Features RESULT = null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // feature_list ::= 
            {
              Features RESULT = null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT = null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

